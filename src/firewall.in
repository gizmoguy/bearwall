#!/bin/bash


BASEDIR=@BASEDIR@
CONFDIR=@CONFDIR@
DATADIR=@DATADIR@

# Don't change these directly, they are filled in by make release
# when a new release is built.
VERSION="1.01"
REVISION="HEAD"

export VERSION BASEDIR CONFDIR DATADIR

# Flush the datadir/tmp
rm -rf $DATADIR/tmp
mkdir -p $DATADIR/tmp

# Check for any command line options (which we don't want !)
FLUSH=0
if [ $# -gt "0" ] ; then
	case "$1" in
		-v|--version)
			echo "Perrys firewalling script, version $VERSION (r$REVISION)."
			exit
			;;
        -f|--flush)
            FLUSH=1
            ;;
        -d|--debug|--verbose)
            set -x
            ;;
		*)
			echo $(basename $0) takes no options.
			echo For more information read the man page.
			exit
			;;
	esac
fi

# Parse configuration file
# Configuration variables can be accessed as conf_KEY
while read line; do
if [[ "$line" =~ ^[^#]*= ]]; then
    k=`echo $line | cut -d'=' -f 1`
    v=`echo $line | cut -d'=' -f 2-`
    export $"conf_${k}"=$v
fi
done < $CONFDIR/bearwall.conf

if [ -z "$conf_mode" ]; then
	export conf_mode=atomic
fi

if [ "$conf_mode" != "atomic" -a "$conf_mode" != "inline" -a "$conf_mode" != "batch" ]; then
	echo "Error in config file: mode must be one of atomic|batch|inline"
	exit 1
fi


cd $BASEDIR

. support/iptables.functions
. support/common.functions
. support/firewall.functions

# Check we can understand how to load modules for this kernel before we start

case `uname -r` in
	2.4.*) EXT=o;;
	*) EXT=ko;;
esac

# Check we actually have interface configuration before we start

if [ -d $CONFDIR/interfaces.d/ ]; then
	INTFILES=`ls -1 $CONFDIR/interfaces.d/*.if 2>/dev/null | wc -l` 
	if [ $INTFILES -eq 0 ] ; then
		echo No interfaces defined in $CONFDIR/interfaces.d, aborting.
		exit
	fi
else
	echo No interfaces.d directory in $CONFDIR/, aborting.
	exit
fi

# User is requesting we kill the firewall, not load it.
if [ "$FLUSH" -eq 1 ]; then
    status Flushing firewall
    conf_mode=inline

    # Flush firewall, and reset policies.
    flush_rules ACCEPT
    exit 0
else
    # Just flush rules for inline and batch modes, don't touch the policies
    # Atomic implicitly flushes the rules.
    if [ "$conf_mode" != "atomic" ]; then
        flush_rules
    fi
fi

# Now we can start building the firewall !

# Set up some reasonable default policies for inline and batch mode. For atomic the policy
# is created during build_atomic.  These rules should never be
# met, as a logging rule above them should be used.
if [ "$conf_mode" != "atomic" ]; then
	iptables_with_table --policy INPUT DROP
	iptables_with_table --policy OUTPUT DROP
	iptables_with_table --policy FORWARD DROP
else
	# If we are trying to do atomic, check we can find the tools before we continue
	check_atomic
fi

new_chain fw-in
new_chain fw-out
new_chain fw-forward
new_chain fw-prerouting-in
new_chain fw-postrouting-out
new_chain fw-forward-out

new_chain mangle-in
new_chain mangle-out
new_chain mangle-fw-in
new_chain mangle-fw-out
new_chain mangle-pre-in
new_chain mangle-post-out

iptables_with_table --append INPUT --jump fw-in
iptables_with_table --append OUTPUT --jump fw-out
iptables_with_table --append FORWARD --jump fw-forward
iptables_with_table --append PREROUTING --jump fw-prerouting-in
iptables_with_table --append POSTROUTING --jump fw-postrouting-out

iptables_with_table --jump mangle-in --append INPUT
iptables_with_table --jump mangle-out --append OUTPUT
iptables_with_table --jump mangle-fw-in --append FORWARD
iptables_with_table --jump mangle-fw-out --append mangle-fw-in
iptables_with_table --jump mangle-pre-in --append PREROUTING
iptables_with_table --jump mangle-post-out --append POSTROUTING

# This is used to add things to individual hosts.  Some hosts may be allowed
# to connect to certain ports, or, alternatively, may not be allowed to.
status Configuring host overrides
for hosts in $CONFDIR/hosts.d/*.host; do
	if [ $hosts == "$CONFDIR/hosts.d/*.host" ]; then
		continue
	fi
	substatus $hosts
	. $hosts
done

# Read in the util functions that interface scripts will use
. support/firewall.functions

# This is the meat of the script.
# For each interface (defined in the $CONFDIR/interfaces.d directory)
#  Create some chains, "if-in", "if-out", "if-forward-in", "if-forward-out"
#  "if-postrouting-out"
#  Then source the file in that directory.
# most of your rules will be defined in these files
status Configuring interfaces
for intf in $CONFDIR/interfaces.d/*.if; do
	if=$(basename $intf| sed s/\.if$//)

	export ONBOOT=1
	load_interface_rules $if 
done

# Now, at the end of each rule write something to log that the packet reached
# the end.  These packets shouldn't really get here, you really should handle
# all packets in the directories.
for i in INPUT OUTPUT FORWARD; do
    case $conf_logging in
        nflog )
            $IPTABLES --append $i \
                -m limit --limit 5/s \
                --jump NFLOG \
                --nflog-prefix "FW/End of ${i} -- see FAQ:"
        ;;
        none )
        ;;
        syslog|* )
            $IPTABLES --append $i \
                -m limit --limit 5/s \
                --jump LOG \
                --log-prefix "FW/End of ${i} -- see FAQ:"
        ;;
    esac
done


# We have finished building the firewall rules. If we are inline we have built
# have finished the firewall too, otherwise we now have to load the firewall 
# rules based on the mode.
case $conf_mode in 
	atomic)
		status Doing atomic load
		substatus Building atomic load files
		build_atomic
		atomic_load
		;;
	batch)
		status Doing batch load
		batch_load
		;;
esac

status Loading connection tracking helper modules
for i in /lib/modules/`uname -r`/kernel/net/{,ipv4/}netfilter/{nf,ip}_conntrack_*.$EXT; do
	if [ -f $i ] ; then
		module=$(basename ${i/.$EXT/})
		# Strip {nf,ip}_conntrack_
		substatus ${module:13}
		modprobe $module
	fi
done

status Loading NAT helper modules
for i in /lib/modules/`uname -r`/kernel/net/{,ipv4/}netfilter/{nf,ip}_nat_*.$EXT; do
	if [ -f $i ] ; then
		module=$(basename ${i/.$EXT/})
		# Strip {nf,ip}_nat_
		substatus ${module:7}
		modprobe $module
	fi
done

logger Firewall loaded
status Firewall loaded
